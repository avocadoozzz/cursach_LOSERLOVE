import { useState } from "react";
import { Calendar } from "react-calendar";// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
import "react-calendar/dist/Calendar.css"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏import "./datepicker.css";
import "./datepicker.css";
import staffImage from "../../assets/img/header/staff.png";
import { useNavigate } from "react-router-dom";

const DatePicker = () => {
  const navigate = useNavigate(); // –•—É–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const [isCalendarOpen, setIsCalendarOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [filteredSlots, setFilteredSlots] = useState([]);
  const [selectedFilter, setSelectedFilter] = useState(null);
  const [selectedTime, setSelectedTime] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      const [openAccountModal, setOpenAccountModal] = useState(false);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç
  const availableTimes = {
    "02.03.2025": ["10:30", "12:10", "14:50", "17:05", "21:20"],
    "24.02.2025": ["09:30", "10:25", "13:10", "15:55", "18:15"],
  };
  const toggleCalendar = () => {
    setIsCalendarOpen(!isCalendarOpen);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  const handleDateSelect = (date) => {
    const formattedDate = date.toLocaleDateString("ru-RU");
    setSelectedDate(date);
    const slots = availableTimes[formattedDate] || [];
    setAvailableSlots(slots);
    setFilteredSlots(slots); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    setIsCalendarOpen(false);
    setSelectedFilter(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã
  };
// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
const filterSlots = (filter) => {
  if (!availableSlots.length) return;

  let filtered = [];
  switch (filter) {
    case "–£—Ç—Ä–æ":
      filtered = availableSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 6 && hour < 12;
      });
      break;
    case "–î–µ–Ω—å":
      filtered = availableSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 12 && hour < 18;
      });
      break;
    case "–í–µ—á–µ—Ä":
      filtered = availableSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 18 && hour < 24;
      });
      break;
    case "–ù–æ—á—å":
      filtered = availableSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 0 && hour < 6;
      });
      break;
    default:
      filtered = availableSlots;
  }
  setFilteredSlots(filtered);
  setSelectedFilter(filter);
};

const handleTimeSelect = (time) => {
  setSelectedTime(time);
};
const handleToggleAccountModal = () => {
  setOpenAccountModal((prev) => !prev);
};
const closeModal = () => {
  setIsModalOpen(false);
  navigate("/");
};

  return (
    <div className="one1">
      {/* –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ */}
      <div className="flex4">
      <button
          className={`filter-button button-morning ${selectedFilter === "–£—Ç—Ä–æ" ? "bg-gray-200" : ""}`}
          onClick={() => filterSlots("–£—Ç—Ä–æ")}
        >
          –£—Ç—Ä–æ
        </button>
        <button
          className={`filter-button button-day  ${selectedFilter === "–î–µ–Ω—å" ? "bg-gray-200" : ""}`}
          onClick={() => filterSlots("–î–µ–Ω—å")}
        >
          –î–µ–Ω—å
        </button>
        <button
          className={`filter-button button-evening  ${selectedFilter === "–í–µ—á–µ—Ä" ? "bg-gray-200" : ""}`}
          onClick={() => filterSlots("–í–µ—á–µ—Ä")}
        >
          –í–µ—á–µ—Ä
        </button>
        <button
          className={`filter-button button-night   ${selectedFilter === "–ù–æ—á—å" ? "bg-gray-200" : ""}`}
          onClick={() => filterSlots("–ù–æ—á—å")}
        >
          –ù–æ—á—å
        </button>
      </div>

 {/* –ö–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è */}
 <button onClick={toggleCalendar} className="icon" >
        üìÖ
      </button>

      {/* –í—ã–ø–∞–¥–∞—é—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*/ }
      {isCalendarOpen && (
        <div className="absolute mt-2 bg-white shadow-lg rounded-lg p-4 z-10">
          <Calendar
            onChange={handleDateSelect}
            value={selectedDate}
          />
        </div>
      )}

      {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞*/ }
      <p className="text-gray-700 font-bold mt-2">
  –í—ã–±—Ä–∞–Ω–æ: {selectedDate ? selectedDate.toLocaleDateString() : "–î–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"}
</p>
 {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã */}
{filteredSlots.length > 0 ? (
  <div className="mt-2">
    <p className="text-gray-600">–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:</p>
    <div className="flex gap-2 mt-1 flex-wrap">
    {filteredSlots.map((time, index) => (
  <button
    key={index}
    className={`bg-gray-100 px-4 py-2 rounded-lg text-gray-700 hover:bg-gray-300 ${
      selectedTime === time ? "bg-gray-300" : ""
    }`}
    onClick={() => handleTimeSelect(time)} // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  >
    {time}
  </button>
))}

    </div>
  </div>
) : (
  <p className="text-gray-500 mt-2">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</p>
)}

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏*/ }
      <div className="dannue">
        <img src={staffImage} className="account-icon12" />
        <p className="text1">–ï—Å–µ–Ω–∏—è</p>
        <p className="text2">45.00 BYN ‚Ä¢ 25 –º–∏–Ω</p>
        <div className="mt-2">
  {selectedTime ? (
    <button className="bg" onClick={() => setIsModalOpen(true)} >
      {selectedTime}
    </button>
  ) : (
    <span className="text-gray-500">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</span>
  )}
</div>
        {isModalOpen && (
        <div className="modal11">
          <div className="modal-content11">
          <button className="close-button11" onClick={() => setIsModalOpen(false)}>
            &times;
          </button>
            <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h2>
            <p>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selectedDate?.toLocaleDateString("ru-RU")}</p>
            <p>–ú–∞—Å—Ç–µ—Ä: –ï—Å–µ–Ω–∏—è</p>
            <p>–í—Ä–µ–º—è: {selectedTime}</p>
            <button onClick={closeModal}>–û–ö</button>
          </div>
        </div>
      )}
      </div>
    </div>
  );
};

export default DatePicker;
